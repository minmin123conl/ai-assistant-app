import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  // State cho tab hi·ªán t·∫°i
  const [activeTab, setActiveTab] = useState('schedule');
  
  // State cho c·∫£m x√∫c
  const moods = [
    { emoji: 'üòä', text: 'Vui v·∫ª' },
    { emoji: 'üò¢', text: 'Bu·ªìn' },
    { emoji: 'üò¥', text: 'M·ªát m·ªèi' },
    { emoji: 'üò§', text: 'T·ª©c gi·∫≠n' },
    { emoji: 'ü§î', text: 'Suy nghƒ©' },
    { emoji: 'üòç', text: 'H·∫°nh ph√∫c' },
    { emoji: 'üò∞', text: 'Lo l·∫Øng' },
    { emoji: 'ü§ó', text: 'Th√¢n thi·ªán' }
  ];
  const [currentMoodIndex, setCurrentMoodIndex] = useState(0);
  
  // State cho th·ªùi gian bi·ªÉu
  const [tasks, setTasks] = useState([
    { id: 1, startTime: '08:00', endTime: '09:30', task: 'H·ªçc To√°n', completed: false },
    { id: 2, startTime: '10:00', endTime: '11:30', task: 'H·ªçc VƒÉn', completed: false },
    { id: 3, startTime: '14:00', endTime: '15:30', task: 'H·ªçc Anh', completed: false }
  ]);
  const [newTask, setNewTask] = useState({ startTime: '', endTime: '', task: '' });
  
  // State cho ghi ch√∫
  const [notes, setNotes] = useState([]);
  const [newNote, setNewNote] = useState({
    title: '',
    content: '',
    password: '',
    deadline: ''
  });
  const [editorFontSize, setEditorFontSize] = useState('16px');
  
  // State cho d·ªãch thu·∫≠t
  const [translation, setTranslation] = useState({
    fromLang: 'auto',
    toLang: 'vi',
    inputText: '',
    outputText: ''
  });
  
  // State cho AI Chat
  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState('');
  
  // State cho gi·∫£i tr√≠
  const [musicPlaylist, setMusicPlaylist] = useState([]);
  const [musicInput, setMusicInput] = useState('');
  const [videoInput, setVideoInput] = useState('');
  const [currentVideo, setCurrentVideo] = useState('');
  
  // Load d·ªØ li·ªáu t·ª´ localStorage khi component mount
  useEffect(() => {
    const savedTasks = localStorage.getItem('ai-assistant-tasks');
    if (savedTasks) {
      setTasks(JSON.parse(savedTasks));
    }
    
    const savedNotes = localStorage.getItem('ai-assistant-notes');
    if (savedNotes) {
      setNotes(JSON.parse(savedNotes));
    }
    
    const savedPlaylist = localStorage.getItem('ai-assistant-playlist');
    if (savedPlaylist) {
      setMusicPlaylist(JSON.parse(savedPlaylist));
    }
  }, []);
  
  // L∆∞u d·ªØ li·ªáu v√†o localStorage khi state thay ƒë·ªïi
  useEffect(() => {
    localStorage.setItem('ai-assistant-tasks', JSON.stringify(tasks));
  }, [tasks]);
  
  useEffect(() => {
    localStorage.setItem('ai-assistant-notes', JSON.stringify(notes));
  }, [notes]);
  
  useEffect(() => {
    localStorage.setItem('ai-assistant-playlist', JSON.stringify(musicPlaylist));
  }, [musicPlaylist]);
  
  // Ch·ª©c nƒÉng c·∫£m x√∫c
  const changeMood = (direction) => {
    if (direction === 'prev') {
      setCurrentMoodIndex((prev) => (prev - 1 + moods.length) % moods.length);
    } else {
      setCurrentMoodIndex((prev) => (prev + 1) % moods.length);
    }
  };
  
  // Ch·ª©c nƒÉng t·ªëi ∆∞u h√≥a th·ªùi gian bi·ªÉu
  const optimizeSchedule = () => {
    alert('AI ƒëang ph√¢n t√≠ch th·ªùi gian bi·ªÉu c·ªßa b·∫°n v√† ƒë∆∞a ra g·ª£i √Ω t·ªëi ∆∞u h√≥a...');
    // C√≥ th·ªÉ t√≠ch h·ª£p v·ªõi API AI th·ª±c t·∫ø ·ªü ƒë√¢y
  };
  
  // Ch·ª©c nƒÉng th·ªùi gian bi·ªÉu
  const addTask = () => {
    if (newTask.startTime && newTask.endTime && newTask.task) {
      const task = {
        id: Date.now(),
        ...newTask,
        completed: false
      };
      setTasks([...tasks, task]);
      setNewTask({ startTime: '', endTime: '', task: '' });
    }
  };
  
  const toggleTaskCompletion = (id) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };
  
  const deleteTask = (id) => {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¥ng vi·ªác n√†y?')) {
      setTasks(tasks.filter(task => task.id !== id));
    }
  };
  
  // Ch·ª©c nƒÉng ghi ch√∫
  const saveNote = () => {
    if (newNote.title && newNote.content) {
      const note = {
        id: Date.now(),
        ...newNote,
        createdAt: new Date().toLocaleString('vi-VN'),
        hasPassword: !!newNote.password
      };
      setNotes([...notes, note]);
      setNewNote({ title: '', content: '', password: '', deadline: '' });
      alert('Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
    } else {
      alert('Vui l√≤ng nh·∫≠p t√™n ghi ch√∫ v√† n·ªôi dung!');
    }
  };
  
  const deleteNote = (id) => {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ghi ch√∫ n√†y?')) {
      setNotes(notes.filter(note => note.id !== id));
    }
  };
  
  const createLock = () => {
    if (!newNote.password) {
      alert('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u tr∆∞·ªõc khi t·∫°o kh√≥a!');
      return;
    }
    alert('Kh√≥a b·∫£o v·ªá ƒë√£ ƒë∆∞·ª£c t·∫°o cho ghi ch√∫ n√†y!');
  };
  
  // Ch·ª©c nƒÉng ƒë·ªãnh d·∫°ng vƒÉn b·∫£n
  const formatText = (command, value = null) => {
    document.execCommand(command, false, value);
  };
  
  // Ch·ª©c nƒÉng d·ªãch thu·∫≠t
  const translateText = () => {
    if (!translation.inputText.trim()) {
      alert('Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn d·ªãch!');
      return;
    }
    
    // Mock translation - trong th·ª±c t·∫ø c√≥ th·ªÉ t√≠ch h·ª£p Google Translate API
    const mockTranslations = {
      'Hello': 'Xin ch√†o',
      'How are you?': 'B·∫°n c√≥ kh·ªèe kh√¥ng?',
      'Thank you': 'C·∫£m ∆°n b·∫°n',
      'Good morning': 'Ch√†o bu·ªïi s√°ng',
      'Good night': 'Ch√∫c ng·ªß ngon'
    };
    
    const result = mockTranslations[translation.inputText] || 
                  `ƒê√£ d·ªãch t·ª´ ${translation.fromLang} sang ${translation.toLang}: ${translation.inputText}`;
    
    setTranslation(prev => ({ ...prev, outputText: result }));
  };
  
  // Ch·ª©c nƒÉng AI Chat
  const sendChatMessage = () => {
    if (!chatInput.trim()) return;
    
    const userMessage = { type: 'user', content: chatInput, timestamp: new Date() };
    setChatMessages(prev => [...prev, userMessage]);
    
    // Mock AI response
    setTimeout(() => {
      const aiResponses = [
        'T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. ƒê√¢y l√† m·ªôt ch·ªß ƒë·ªÅ th√∫ v·ªã!',
        'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n th√™m v·ªÅ v·∫•n ƒë·ªÅ n√†y.',
        'ƒê√≥ l√† m·ªôt c√¢u h·ªèi hay! H√£y ƒë·ªÉ t√¥i suy nghƒ© v√† ƒë∆∞a ra c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t.',
        'T√¥i r·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√°c kh√¥ng?',
        'D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, t√¥i nghƒ© r·∫±ng...'
      ];
      
      const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)];
      const aiMessage = { type: 'ai', content: randomResponse, timestamp: new Date() };
      setChatMessages(prev => [...prev, aiMessage]);
    }, 1000);
    
    setChatInput('');
  };
  
  // Ch·ª©c nƒÉng gi·∫£i tr√≠
  const addMusic = () => {
    if (!musicInput.trim()) {
      alert('Vui l√≤ng nh·∫≠p link nh·∫°c!');
      return;
    }
    
    // Extract video ID from YouTube URL (simplified)
    let videoId = '';
    if (musicInput.includes('youtube.com/watch?v=')) {
      videoId = musicInput.split('v=')[1].split('&')[0];
    } else if (musicInput.includes('youtu.be/')) {
      videoId = musicInput.split('youtu.be/')[1].split('?')[0];
    }
    
    const song = {
      id: Date.now(),
      title: `B√†i h√°t ${musicPlaylist.length + 1}`,
      url: musicInput,
      videoId: videoId
    };
    
    setMusicPlaylist([...musicPlaylist, song]);
    setMusicInput('');
    alert('ƒê√£ th√™m b√†i h√°t v√†o playlist!');
  };
  
  const removeMusicFromPlaylist = (id) => {
    setMusicPlaylist(musicPlaylist.filter(song => song.id !== id));
  };
  
  const loadVideo = () => {
    if (!videoInput.trim()) {
      alert('Vui l√≤ng nh·∫≠p link video!');
      return;
    }
    
    setCurrentVideo(videoInput);
    alert('Video ƒë√£ ƒë∆∞·ª£c t·∫£i!');
  };
  
  // Render c√°c tab content
  const renderTabContent = () => {
    switch (activeTab) {
      case 'schedule':
        return (
          <div className="content-section">
            {/* C·∫£m x√∫c h√¥m nay */}
            <div className="mood-section">
              <h3>‚òÄÔ∏è C·∫£m X√∫c H√¥m Nay</h3>
              <div className="mood-selector">
                <button className="mood-btn" onClick={() => changeMood('prev')}>‚Äπ</button>
                <div className="mood-display">
                  <div className="mood-emoji">{moods[currentMoodIndex].emoji}</div>
                  <div className="mood-text">{moods[currentMoodIndex].text}</div>
                </div>
                <button className="mood-btn" onClick={() => changeMood('next')}>‚Ä∫</button>
              </div>
            </div>
            
            {/* AI H·ªó tr·ª£ s·∫Øp x·∫øp */}
            <div className="ai-optimization-section">
              <h3>ü§ñ AI H·ªó Tr·ª£ S·∫Øp X·∫øp TGB</h3>
              <p>AI s·∫Ω gi√∫p b·∫°n t·ªëi ∆∞u h√≥a th·ªùi gian bi·ªÉu d·ª±a tr√™n m·ª©c ƒë·ªô ∆∞u ti√™n v√† th√≥i quen h·ªçc t·∫≠p.</p>
              <button className="optimize-btn" onClick={optimizeSchedule}>‚ú® T·ªëi ∆∞u h√≥a</button>
            </div>
            
            {/* Th·ªùi gian bi·ªÉu */}
            <div className="schedule-section">
              <h3>üìÖ Th·ªùi Gian Bi·ªÉu</h3>
              <div className="add-task">
                <input
                  type="time"
                  className="time-input"
                  placeholder="Th·ªùi gian b·∫Øt ƒë·∫ßu"
                  value={newTask.startTime}
                  onChange={(e) => setNewTask({...newTask, startTime: e.target.value})}
                />
                <input
                  type="time"
                  className="time-input"
                  placeholder="Th·ªùi gian k·∫øt th√∫c"
                  value={newTask.endTime}
                  onChange={(e) => setNewTask({...newTask, endTime: e.target.value})}
                />
                <input
                  type="text"
                  className="task-input"
                  placeholder="Nh·∫≠p c√¥ng vi·ªác..."
                  value={newTask.task}
                  onChange={(e) => setNewTask({...newTask, task: e.target.value})}
                />
                <button className="add-btn" onClick={addTask}>+ Th√™m</button>
              </div>
              
              <div className="task-list">
                {tasks.map(task => (
                  <div key={task.id} className={`task-item ${task.completed ? 'completed' : ''}`}>
                    <div className="task-time">{task.startTime} - {task.endTime}</div>
                    <div className="task-content">{task.task}</div>
                    <div className="task-actions">
                      <button 
                        className="toggle-btn" 
                        onClick={() => toggleTaskCompletion(task.id)}
                      >
                        ‚≠ï
                      </button>
                      <button 
                        className="delete-btn" 
                        onClick={() => deleteTask(task.id)}
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );
        
      case 'notes':
        return (
          <div className="content-section">
            <div className="notes-section">
              <h3>üìù T·∫°o ghi ch√∫</h3>
              <div className="note-form">
                <input
                  type="text"
                  className="note-title-input"
                  placeholder="T√™n ghi ch√∫..."
                  value={newNote.title}
                  onChange={(e) => setNewNote({...newNote, title: e.target.value})}
                />
                <input
                  type="password"
                  className="note-password-input"
                  placeholder="M·∫≠t kh·∫©u (t√πy ch·ªçn)"
                  value={newNote.password}
                  onChange={(e) => setNewNote({...newNote, password: e.target.value})}
                />
                <input
                  type="datetime-local"
                  className="note-deadline-input"
                  placeholder="Th·ªùi h·∫°n"
                  value={newNote.deadline}
                  onChange={(e) => setNewNote({...newNote, deadline: e.target.value})}
                />
                <div className="note-actions">
                  <button className="lock-btn" onClick={createLock}>üîí T·∫°o kh√≥a</button>
                  <button className="save-btn" onClick={saveNote}>üíæ L∆∞u</button>
                </div>
              </div>
              
              <div className="editor-toolbar">
                <select 
                  className="font-size-select"
                  value={editorFontSize}
                  onChange={(e) => setEditorFontSize(e.target.value)}
                >
                  <option value="12px">12px</option>
                  <option value="14px">14px</option>
                  <option value="16px">16px</option>
                  <option value="18px">18px</option>
                  <option value="20px">20px</option>
                  <option value="24px">24px</option>
                  <option value="28px">28px</option>
                  <option value="32px">32px</option>
                </select>
                <button className="toolbar-btn" onClick={() => formatText('bold')}>B</button>
                <button className="toolbar-btn" onClick={() => formatText('italic')}>I</button>
                <button className="toolbar-btn" onClick={() => formatText('underline')}>U</button>
                <button className="toolbar-btn" onClick={() => formatText('justifyLeft')}>‚¨ÖÔ∏è</button>
                <button className="toolbar-btn" onClick={() => formatText('justifyCenter')}>‚¨ÜÔ∏è</button>
                <button className="toolbar-btn" onClick={() => formatText('justifyRight')}>‚û°Ô∏è</button>
                <button className="toolbar-btn" onClick={() => formatText('justifyFull')}>‚¨å</button>
                <button className="toolbar-btn" onClick={() => formatText('insertOrderedList')}>1.</button>
                <button className="toolbar-btn" onClick={() => formatText('insertUnorderedList')}>‚Ä¢</button>
                <button className="toolbar-btn" onClick={() => formatText('createLink', prompt('Nh·∫≠p URL:'))}>üîó</button>
                <button className="toolbar-btn">‚ãØ</button>
              </div>
              
              <textarea
                className="note-content-textarea"
                placeholder="Nh·∫≠p n·ªôi dung ghi ch√∫..."
                value={newNote.content}
                onChange={(e) => setNewNote({...newNote, content: e.target.value})}
                style={{ fontSize: editorFontSize }}
              />
              
              <div className="saved-notes">
                <h4>Ghi ch√∫ ƒë√£ l∆∞u ({notes.length})</h4>
                {notes.length === 0 ? (
                  <div className="no-notes">Ch∆∞a c√≥ ghi ch√∫ n√†o ƒë∆∞·ª£c l∆∞u</div>
                ) : (
                  notes.map(note => (
                    <div key={note.id} className="saved-note-item">
                      <div className="note-header">
                        <h5>{note.title}</h5>
                        <button 
                          className="delete-note-btn" 
                          onClick={() => deleteNote(note.id)}
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                      <div className="note-preview">
                        {note.content.substring(0, 100)}
                        {note.content.length > 100 && '...'}
                      </div>
                      <div className="note-meta">
                        {note.hasPassword && <span className="note-protected">üîí C√≥ m·∫≠t kh·∫©u</span>}
                        {note.deadline && <span className="note-deadline">‚è∞ H·∫øt h·∫°n: {new Date(note.deadline).toLocaleString('vi-VN')}</span>}
                        <span className="note-created">üìÖ T·∫°o: {note.createdAt}</span>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        );
        
      case 'learning':
        return (
          <div className="content-section">
            <div className="learning-grid">
              {/* D·ªãch ng√¥n ng·ªØ */}
              <div className="translation-section">
                <h3>üåê D·ªãch Ng√¥n Ng·ªØ</h3>
                <div className="language-selectors">
                  <select 
                    className="language-select"
                    value={translation.fromLang}
                    onChange={(e) => setTranslation({...translation, fromLang: e.target.value})}
                  >
                    <option value="auto">T·ª± ƒë·ªông ph√°t hi·ªán</option>
                    <option value="vi">Ti·∫øng Vi·ªát</option>
                    <option value="en">English</option>
                    <option value="zh">‰∏≠Êñá</option>
                    <option value="ja">Êó•Êú¨Ë™û</option>
                    <option value="ko">ÌïúÍµ≠Ïñ¥</option>
                    <option value="fr">Fran√ßais</option>
                    <option value="de">Deutsch</option>
                    <option value="es">Espa√±ol</option>
                    <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                    <option value="th">‡πÑ‡∏ó‡∏¢</option>
                  </select>
                  <span className="arrow">‚Üí</span>
                  <select 
                    className="language-select"
                    value={translation.toLang}
                    onChange={(e) => setTranslation({...translation, toLang: e.target.value})}
                  >
                    <option value="vi">Ti·∫øng Vi·ªát</option>
                    <option value="en">English</option>
                    <option value="zh">‰∏≠Êñá</option>
                    <option value="ja">Êó•Êú¨Ë™û</option>
                    <option value="ko">ÌïúÍµ≠Ïñ¥</option>
                    <option value="fr">Fran√ßais</option>
                    <option value="de">Deutsch</option>
                    <option value="es">Espa√±ol</option>
                    <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                    <option value="th">‡πÑ‡∏ó‡∏¢</option>
                  </select>
                </div>
                <textarea
                  className="translation-input"
                  placeholder="Nh·∫≠p vƒÉn b·∫£n c·∫ßn d·ªãch..."
                  value={translation.inputText}
                  onChange={(e) => setTranslation({...translation, inputText: e.target.value})}
                />
                <button className="translate-btn" onClick={translateText}>D·ªãch</button>
                <textarea
                  className="translation-output"
                  placeholder="K·∫øt qu·∫£ d·ªãch s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y..."
                  value={translation.outputText}
                  readOnly
                />
              </div>
              
              {/* AI Chat */}
              <div className="ai-chat-section">
                <h3>ü§ñ AI H·ªó Tr·ª£ H·ªçc T·∫≠p</h3>
                <div className="chat-messages">
                  {chatMessages.map((message, index) => (
                    <div key={index} className={`message ${message.type}`}>
                      <div className="message-content">{message.content}</div>
                    </div>
                  ))}
                </div>
                <div className="chat-input-container">
                  <label className="file-upload-label">üì∑</label>
                  <input
                    type="text"
                    className="chat-input"
                    placeholder="Nh·∫≠p tin nh·∫Øn..."
                    value={chatInput}
                    onChange={(e) => setChatInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
                  />
                  <button className="send-btn" onClick={sendChatMessage}>G·ª≠i</button>
                </div>
              </div>
            </div>
          </div>
        );
        
      case 'entertainment':
        return (
          <div className="content-section">
            <div className="entertainment-section">
              {/* Nghe nh·∫°c */}
              <div className="music-section">
                <h3>üéµ Nghe Nh·∫°c</h3>
                <div className="music-input-container">
                  <input
                    type="text"
                    className="music-input"
                    placeholder="Nh·∫≠p link nh·∫°c (YouTube, Spotify)..."
                    value={musicInput}
                    onChange={(e) => setMusicInput(e.target.value)}
                  />
                  <button className="add-music-btn" onClick={addMusic}>Th√™m</button>
                </div>
                
                <div className="playlist">
                  <h4>Playlist ({musicPlaylist.length})</h4>
                  {musicPlaylist.length === 0 ? (
                    <div className="no-music">Ch∆∞a c√≥ b√†i h√°t n√†o trong playlist</div>
                  ) : (
                    musicPlaylist.map(song => (
                      <div key={song.id} className="playlist-item">
                        <span className="track-name">{song.title}</span>
                        <button 
                          className="remove-track" 
                          onClick={() => removeMusicFromPlaylist(song.id)}
                        >
                          ‚ùå
                        </button>
                      </div>
                    ))
                  )}
                </div>
              </div>
              
              {/* Xem video */}
              <div className="video-section">
                <h3>üì∫ Xem Video</h3>
                <div className="video-input-container">
                  <input
                    type="text"
                    className="video-input"
                    placeholder="Nh·∫≠p link video (YouTube, Bilibili)..."
                    value={videoInput}
                    onChange={(e) => setVideoInput(e.target.value)}
                  />
                  <button className="add-video-btn" onClick={loadVideo}>Ph√°t</button>
                </div>
                
                {currentVideo && (
                  <div className="video-player">
                    <iframe
                      width="100%"
                      height="315"
                      src={currentVideo.includes('youtube.com') ? 
                        currentVideo.replace('watch?v=', 'embed/') : 
                        currentVideo
                      }
                      frameBorder="0"
                      allowFullScreen
                    />
                  </div>
                )}
              </div>
            </div>
          </div>
        );
        
      default:
        return null;
    }
  };
  
  return (
    <div className="app">
      {/* Sidebar */}
      <div className="sidebar">
        <div className="logo">
          <h1>AI Assistant</h1>
          <div className="subtitle">Tr·ª£ l√Ω th√¥ng minh</div>
        </div>
        
        <div className="nav-tabs">
          <button 
            className={`tab schedule-tab ${activeTab === 'schedule' ? 'active' : ''}`}
            onClick={() => setActiveTab('schedule')}
          >
            üìÖ Th·ªùi Gian Bi·ªÉu
          </button>
          <button 
            className={`tab notes-tab ${activeTab === 'notes' ? 'active' : ''}`}
            onClick={() => setActiveTab('notes')}
          >
            üìù Ghi Ch√∫
          </button>
          <button 
            className={`tab learning-tab ${activeTab === 'learning' ? 'active' : ''}`}
            onClick={() => setActiveTab('learning')}
          >
            ü§ñ AI H·ªó Tr·ª£ H·ªçc T·∫≠p
          </button>
          <button 
            className={`tab entertainment-tab ${activeTab === 'entertainment' ? 'active' : ''}`}
            onClick={() => setActiveTab('entertainment')}
          >
            üéÆ Gi·∫£i Tr√≠
          </button>
        </div>
      </div>
      
      {/* Main Content */}
      <div className="main-content">
        {renderTabContent()}
      </div>
    </div>
  );
}

export default App;

